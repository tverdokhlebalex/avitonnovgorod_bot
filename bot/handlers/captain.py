from aiogram import Router, F
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.enums import ContentType
from ..api_client import team_by_tg, team_rename, start_game, submit_photo
from ..states import PhotoStates, CaptainStates
from ..watchers import WATCHERS
from ..utils import format_roster
from ..texts import RULES_SHORT
from ..keyboards import ib_leaderboard

router = Router()

async def _ensure_captain(m: Message) -> bool:
    st, info = await team_by_tg(m.from_user.id)
    if st != 200:
        await m.answer("–¢—ã –Ω–µ –≤ –∫–æ–º–∞–Ω–¥–µ. –ù–∞–±–µ—Ä–∏ /reg.")
        return False
    if not info.get("is_captain"):
        await m.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —É–∂–µ –Ω–∞–∑–Ω–∞—á–∏–ª–∞ –∫–∞–ø–∏—Ç–∞–Ω–∞. –ü–æ–ø—Ä–æ—Å–∏ –∫–∞–ø–∏—Ç–∞–Ω–∞ –Ω–∞–ø–∏—Å–∞—Ç—å –º–Ω–µ.")
        return False
    return True

@router.message(CaptainStates.waiting_team_name, F.text)
async def captain_name_state(m: Message, state: FSMContext):
    if not await _ensure_captain(m): 
        return await state.clear()
    new_name = (m.text or "").strip()
    if len(new_name) < 2:
        return await m.answer("–ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ï—â—ë —Ä–∞–∑.")
    st, resp = await team_rename(m.from_user.id, new_name)
    await state.clear()
    if st == 200 and resp.get("ok"):
        await m.answer(f"–ì–æ—Ç–æ–≤–æ! –ù–æ–≤–æ–µ –∏–º—è –∫–æ–º–∞–Ω–¥—ã: *{resp.get('team_name')}*.", parse_mode="Markdown")
        await m.answer(RULES_SHORT, parse_mode="Markdown", reply_markup=ib_leaderboard())
    else:
        await m.answer(resp.get("detail") or "–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.")

# Fallback: –∫–∞–ø–∏—Ç–∞–Ω –º–æ–≥ –Ω–µ –ø–æ–ø–∞—Å—Ç—å –≤ state ‚Äî –ø—Ä–∏–Ω–∏–º–∞–µ–º —Å–≤–æ–±–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –∫–∞–∫ –Ω–∞–∑–≤–∞–Ω–∏–µ
@router.message(F.text)
async def free_text_as_team_name(m: Message, state: FSMContext):
    # –æ—Ç—Ä–∞–±–æ—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∫–∞–ø–∏—Ç–∞–Ω –∏ –º–æ–∂–Ω–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å
    st, info = await team_by_tg(m.from_user.id)
    if st != 200 or not info.get("is_captain"):
        return  # –Ω–µ –∫–∞–ø–∏—Ç–∞–Ω ‚Üí –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–∞–ª—å—à–µ
    # –ø—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞: –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∏–º—è –∏–ª–∏ can_rename –µ—â—ë True –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    if (info.get("team_name","").startswith("–ö–æ–º–∞–Ω–¥–∞ ‚Ññ")) and info.get("route_id") is not None:
        new_name = (m.text or "").strip()
        if len(new_name) >= 2:
            st2, resp = await team_rename(m.from_user.id, new_name)
            if st2 == 200 and resp.get("ok"):
                await m.answer(f"–ì–æ—Ç–æ–≤–æ! –ù–æ–≤–æ–µ –∏–º—è –∫–æ–º–∞–Ω–¥—ã: *{resp.get('team_name')}*.", parse_mode="Markdown")
                await m.answer(RULES_SHORT, parse_mode="Markdown", reply_markup=ib_leaderboard())
                return
    # –∏–Ω–∞—á–µ –Ω–∏–∫–∞–∫ –Ω–µ —Ä–µ–∞–≥–∏—Ä—É–µ–º ‚Äî –¥—Ä—É–≥–∏–µ —Ö—ç–Ω–¥–ª–µ—Ä—ã –ø–æ–¥—Ö–≤–∞—Ç—è—Ç

@router.message(F.text.regexp(r"^/rename(\s+.+)?$"))
async def cmd_rename(m: Message):
    if not await _ensure_captain(m): return
    parts = (m.text or "").split(maxsplit=1)
    if len(parts) < 2:
        return await m.answer("–ü—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏ –Ω–æ–≤–æ–µ –∏–º—è *—Ç–µ–∫—Å—Ç–æ–º*.\n–ò–ª–∏: `/rename –ù–æ–≤–æ–µ –∏–º—è`", parse_mode="Markdown")
    st, resp = await team_rename(m.from_user.id, parts[1].strip())
    if st == 200 and resp.get("ok"):
        await m.answer(f"–ì–æ—Ç–æ–≤–æ! –ù–æ–≤–æ–µ –∏–º—è –∫–æ–º–∞–Ω–¥—ã: *{resp.get('team_name')}*.", parse_mode="Markdown")
        await m.answer(RULES_SHORT, parse_mode="Markdown", reply_markup=ib_leaderboard())
    else:
        await m.answer(resp.get("detail") or "–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.")

@router.message(F.text == "/startquest")
async def cmd_start(m: Message):
    if not await _ensure_captain(m): return
    st, resp = await start_game(m.from_user.id)
    if st == 200 and resp.get("ok"):
        await m.answer("üöÄ –ö–≤–µ—Å—Ç –Ω–∞—á–∞—Ç! –£–¥–∞—á–∏!", parse_mode="Markdown")
        # –í–°–ï–ì–î–ê –∑–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Ç—á–µ—Ä ‚Äî –æ–Ω —Å–∞–º –ø—Ä–∏—à–ª—ë—Ç –ø–µ—Ä–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ
        WATCHERS.start(team_id=resp["team_id"], chat_id=m.chat.id, tg_id=m.from_user.id, bot=m.bot)
    elif st == 200:
        await m.answer(resp.get("message") or "–£–∂–µ –Ω–∞—á–∞–ª–∏.")
    else:
        await m.answer(resp.get("detail") or "–°—Ç–∞—Ä—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")

@router.message(F.text == "/photo")
async def cmd_photo_hint(m: Message, state: FSMContext):
    if not await _ensure_captain(m): return
    await state.set_state(PhotoStates.waiting_photo)
    await m.answer("–û–∫! –ü—Ä–∏—à–ª–∏ *—Ñ–æ—Ç–æ* —Ç–µ–∫—É—â–µ–π —Ç–æ—á–∫–∏ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.", parse_mode="Markdown")

@router.message(PhotoStates.waiting_photo, F.content_type == ContentType.PHOTO)
async def on_photo(m: Message, state: FSMContext):
    if not await _ensure_captain(m):
        await state.clear()
        return
    file_id = m.photo[-1].file_id
    st, resp = await submit_photo(m.from_user.id, file_id)
    await state.clear()
    if st == 200 and resp.get("ok"):
        await m.answer("–ü—Ä–∏–Ω—è–ª, –æ—Ç–ø—Ä–∞–≤–∏–ª –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É. –ñ–¥—ë–º ‚ö°")
        # –≤–æ—Ç—á–µ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞, –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π –≤–∫–ª—é—á–∏–º
        st_team, info = await team_by_tg(m.from_user.id)
        if st_team == 200:
            WATCHERS.start(team_id=info["team_id"], chat_id=m.chat.id, tg_id=m.from_user.id, bot=m.bot)
    else:
        await m.answer(resp.get("detail") or "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ.")

@router.message(F.content_type == ContentType.PHOTO)
async def on_any_photo(m: Message, state: FSMContext):
    st, info = await team_by_tg(m.from_user.id)
    if st == 200 and info.get("is_captain"):
        file_id = m.photo[-1].file_id
        st2, resp = await submit_photo(m.from_user.id, file_id)
        if st2 == 200 and resp.get("ok"):
            await m.answer("–ü—Ä–∏–Ω—è–ª, –æ—Ç–ø—Ä–∞–≤–∏–ª –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É. –ñ–¥—ë–º ‚ö°")
            WATCHERS.start(team_id=info["team_id"], chat_id=m.chat.id, tg_id=m.from_user.id, bot=m.bot)
        else:
            await m.answer(resp.get("detail") or "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ.")
