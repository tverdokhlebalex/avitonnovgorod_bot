from aiogram import Router, F
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.enums import ContentType
from ..api_client import team_by_tg, team_rename, start_game, submit_photo, current_checkpoint
from ..states import PhotoStates, CaptainStates   # ‚Üê NEW
from ..watchers import WATCHERS
from ..utils import format_roster
from ..texts import RULES_SHORT
from ..keyboards import ib_leaderboard          # ‚Üê NEW
from ..config import API_BASE                   # ‚Üê NEW

router = Router()

async def _ensure_captain(m: Message) -> bool:
    st, info = await team_by_tg(m.from_user.id)
    if st != 200:
        await m.answer("–¢—ã –Ω–µ –≤ –∫–æ–º–∞–Ω–¥–µ. –ù–∞–±–µ—Ä–∏ /reg.")
        return False
    if not info.get("is_captain"):
        await m.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —É –∫–∞–ø–∏—Ç–∞–Ω–∞. –ü–µ—Ä–µ–¥–∞–π —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–ø–∏—Ç–∞–Ω—É.")
        return False
    return True

# NEW: –∫–∞–ø–∏—Ç–∞–Ω –ø—Ä–æ—Å—Ç–æ –ø–∏—à–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ –Ω–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
@router.message(CaptainStates.waiting_team_name, F.text)
async def set_team_name_plain(m: Message, state: FSMContext):
    if not await _ensure_captain(m):
        await state.clear()
        return
    new_name = (m.text or "").strip()
    if len(new_name) < 2:
        return await m.answer("–ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ù–∞–ø–∏—à–∏ –¥—Ä—É–≥–æ–µ.")

    st, resp = await team_rename(m.from_user.id, new_name)
    if st == 200 and isinstance(resp, dict) and resp.get("ok"):
        await state.clear()
        await m.answer(f"–ì–æ—Ç–æ–≤–æ! –ù–æ–≤–æ–µ –∏–º—è –∫–æ–º–∞–Ω–¥—ã: *{resp.get('team_name')}*.", parse_mode="Markdown")

        # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è + –∫–Ω–æ–ø–∫–∞ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞ (–º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ)
        rules = (
            RULES_SHORT
            + "\n\n–ö–Ω–æ–ø–∫–∞ –Ω–∏–∂–µ ‚Äî *–õ–∏–¥–µ—Ä–±–æ—Ä–¥*: –∂–∏–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞ –∫–æ–º–∞–Ω–¥ –≤ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏."
        )
        await m.answer(rules, parse_mode="Markdown", reply_markup=ib_leaderboard(f"{API_BASE}/webapp"))
        await m.answer("–ö–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç–µ –∫–≤–µ—Å—Ç –∫–æ–º–∞–Ω–¥–æ–π */startquest*.", parse_mode="Markdown")
    else:
        detail = resp.get("detail") if isinstance(resp, dict) else None
        await m.answer((detail or "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–Ω—è—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–µ.") + "\n\n–ü—Ä–∏—à–ª–∏ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.")

@router.message(F.text.regexp(r"^/rename(\s+.+)?$"))
async def cmd_rename(m: Message):
    if not await _ensure_captain(m):
        return
    parts = (m.text or "").split(maxsplit=1)
    if len(parts) < 2:
        return await m.answer("–ü—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏ *–Ω–∞–∑–≤–∞–Ω–∏–µ* –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º (–±–µ–∑ –∫–æ–º–∞–Ω–¥—ã).", parse_mode="Markdown")
    st, resp = await team_rename(m.from_user.id, parts[1].strip())
    if st == 200 and resp.get("ok"):
        await m.answer(f"–ì–æ—Ç–æ–≤–æ! –ù–æ–≤–æ–µ –∏–º—è –∫–æ–º–∞–Ω–¥—ã: *{resp.get('team_name')}*.", parse_mode="Markdown")
    else:
        await m.answer(resp.get("detail") or "–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.")

@router.message(F.text == "/startquest")
async def cmd_start(m: Message):
    if not await _ensure_captain(m):
        return
    st, resp = await start_game(m.from_user.id)
    if st == 200 and resp.get("ok"):
        await m.answer("üöÄ –ö–≤–µ—Å—Ç –Ω–∞—á–∞—Ç! –£–¥–∞—á–∏!\n" + RULES_SHORT, parse_mode="Markdown")
        # watchers —Å–∞–º –ø—Ä–∏—à–ª—ë—Ç –∑–∞–¥–∞–Ω–∏–µ (–∏ –Ω–∞ –±—É–¥—É—â–µ–µ ‚Äî –Ω–æ–≤—ã–µ)
        st2, cur = await current_checkpoint(m.from_user.id)
        if st2 == 200 and not cur.get("finished"):
            WATCHERS.start(team_id=resp["team_id"], chat_id=m.chat.id, tg_id=m.from_user.id, bot=m.bot)
        else:
            await m.answer("–ó–∞–¥–∞–Ω–∏—è –ø–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–æ–º.")
    elif st == 200:
        await m.answer(resp.get("message") or "–£–∂–µ –Ω–∞—á–∞–ª–∏.")
    else:
        await m.answer(resp.get("detail") or "–°—Ç–∞—Ä—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")

@router.message(F.text == "/photo")
async def cmd_photo_hint(m: Message, state: FSMContext):
    if not await _ensure_captain(m):
        return
    await state.set_state(PhotoStates.waiting_photo)
    await m.answer("–û–∫! –ü—Ä–∏—à–ª–∏ *—Ñ–æ—Ç–æ* —Ç–µ–∫—É—â–µ–π —Ç–æ—á–∫–∏ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.", parse_mode="Markdown")

@router.message(PhotoStates.waiting_photo, F.content_type == ContentType.PHOTO)
async def on_photo(m: Message, state: FSMContext):
    if not await _ensure_captain(m):
        await state.clear()
        return
    file_id = m.photo[-1].file_id
    st, resp = await submit_photo(m.from_user.id, file_id)
    await state.clear()
    if st == 200 and resp.get("ok"):
        await m.answer("–ü—Ä–∏–Ω—è–ª, –æ—Ç–ø—Ä–∞–≤–∏–ª –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É. –ñ–¥—ë–º ‚ö°")
        st_team, info = await team_by_tg(m.from_user.id)
        if st_team == 200:
            WATCHERS.start(team_id=info["team_id"], chat_id=m.chat.id, tg_id=m.from_user.id, bot=m.bot)
    else:
        await m.answer(resp.get("detail") or "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ.")

@router.message(F.content_type == ContentType.PHOTO)
async def on_any_photo(m: Message, state: FSMContext):
    st, info = await team_by_tg(m.from_user.id)
    if st == 200 and info.get("is_captain"):
        file_id = m.photo[-1].file_id
        st2, resp = await submit_photo(m.from_user.id, file_id)
        if st2 == 200 and resp.get("ok"):
            await m.answer("–ü—Ä–∏–Ω—è–ª, –æ—Ç–ø—Ä–∞–≤–∏–ª –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É. –ñ–¥—ë–º ‚ö°")
            WATCHERS.start(team_id=info["team_id"], chat_id=m.chat.id, tg_id=m.from_user.id, bot=m.bot)
        else:
            await m.answer(resp.get("detail") or "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ.")
