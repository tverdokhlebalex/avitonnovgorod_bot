from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.enums import ContentType
from ..api_client import team_by_tg, team_rename, start_game, submit_photo, current_checkpoint
from ..states import PhotoStates, CaptainStates
from ..watchers import WATCHERS
from ..utils import format_roster
from ..texts import RULES_SHORT
from ..keyboards import ib_start_confirm  # ‚Üê NEW

router = Router()

async def _ensure_captain(m: Message) -> tuple[bool, dict | None]:
    st, info = await team_by_tg(m.from_user.id)
    if st != 200 or not info:
        await m.answer("–¢—ã –Ω–µ –≤ –∫–æ–º–∞–Ω–¥–µ. –ù–∞–±–µ—Ä–∏ /reg.")
        return False, None
    if not info.get("is_captain"):
        await m.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —É–∂–µ –∏–º–µ–µ—Ç –∫–∞–ø–∏—Ç–∞–Ω–∞. –°–æ –º–Ω–æ–π –æ–±—â–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –∫–∞–ø–∏—Ç–∞–Ω.")
        return False, info
    return True, info

async def _start_and_watch(m: Message, team_id: int):
    WATCHERS.start(team_id=team_id, chat_id=m.chat.id, tg_id=m.from_user.id, bot=m.bot)
    st, cur = await current_checkpoint(m.from_user.id)
    if st == 200 and not cur.get("finished"):
        cp = cur["checkpoint"]
        await m.answer(
            f"*–ó–∞–¥–∞–Ω–∏–µ {cp['order_num']}/{cp.get('total','?')} ‚Äî {cp.get('title','')}*\n\n{cp.get('riddle','')}",
            parse_mode="Markdown"
        )

@router.message(CaptainStates.waiting_team_name, F.text)
async def captain_name_from_state(m: Message, state: FSMContext):
    ok, _ = await _ensure_captain(m)
    if not ok:
        return await state.clear()

    new_name = (m.text or "").strip()
    if len(new_name) < 2:
        return await m.answer("–ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ï—â—ë —Ä–∞–∑:")

    st, resp = await team_rename(m.from_user.id, new_name)
    if st == 200 and resp.get("ok"):
        await state.clear()
        await m.answer(f"–ì–æ—Ç–æ–≤–æ! –ù–æ–≤–æ–µ –∏–º—è –∫–æ–º–∞–Ω–¥—ã: *{resp.get('team_name')}*.", parse_mode="Markdown")
        # –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –±–µ–∑ –∫–Ω–æ–ø–æ–∫
        await m.answer(RULES_SHORT, parse_mode="Markdown")
        # ‚Üê —Ç–µ–ø–µ—Ä—å —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ, –ù–û –ù–ï —Å—Ç–∞—Ä—Ç—É–µ–º —Å–∞–º–∏
        await m.answer("–ì–æ—Ç–æ–≤—ã —Å—Ç–∞—Ä—Ç–æ–≤–∞—Ç—å?", reply_markup=ib_start_confirm())
    else:
        await m.answer(resp.get("detail") or "–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –∏–º—è:")

# –§–æ–ª–±–µ–∫: –∫–∞–ø–∏—Ç–∞–Ω –º–æ–∂–µ—Ç –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏—Å–ª–∞—Ç—å –∏–º—è –±–µ–∑ /rename
@router.message(F.text & ~F.text.regexp(r"^/"))
async def captain_name_fallback(m: Message, state: FSMContext):
    ok, info = await _ensure_captain(m)
    if not ok or not info:
        return
    # –†–∞–∑—Ä–µ—à–∞–µ–º –≤–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è, –ø–æ–∫–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ —Å—Ç–∞—Ä—Ç–æ–≤–∞–ª–∞
    st, cur = await current_checkpoint(m.from_user.id)
    if st == 200:   # —É–∂–µ —Å—Ç–∞—Ä—Ç–æ–≤–∞–ª–∏ ‚Äî –∏–≥–Ω–æ—Ä
        return
    await captain_name_from_state(m, state)

@router.callback_query(F.data == "start_yes")
async def on_start_yes(c: CallbackQuery):
    # –ø—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –∂–º—ë—Ç –∏–º–µ–Ω–Ω–æ –∫–∞–ø–∏—Ç–∞–Ω
    st, info = await team_by_tg(c.from_user.id)
    if st != 200 or not info or not info.get("is_captain"):
        return await c.answer("–¢–æ–ª—å–∫–æ –∫–∞–ø–∏—Ç–∞–Ω –º–æ–∂–µ—Ç —Å—Ç–∞—Ä—Ç–æ–≤–∞—Ç—å", show_alert=True)

    st2, resp = await start_game(c.from_user.id)
    await c.answer()
    if st2 == 200:
        await c.message.answer("üöÄ –ö–≤–µ—Å—Ç –Ω–∞—á–∞—Ç!")
        # –æ—Ç–ø—Ä–∞–≤–∏–º –ø–µ—Ä–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ —Å—Ä–∞–∑—É
        class _Msg:  # –Ω–µ–±–æ–ª—å—à–æ–π –∞–¥–∞–ø—Ç–µ—Ä, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å _start_and_watch
            def __init__(self, c): self.chat=c.message.chat; self.bot=c.bot; self.from_user=c.from_user
            async def answer(self, *a, **kw): return await c.message.answer(*a, **kw)
        await _start_and_watch(_Msg(c), info["team_id"])
    else:
        await c.message.answer(resp.get("detail") or "–°—Ç–∞—Ä—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")

@router.callback_query(F.data == "start_no")
async def on_start_no(c: CallbackQuery):
    await c.answer("–û–∫, –Ω–∞–∂–º–∏—Ç–µ ¬´–°—Ç–∞—Ä—Ç—É–µ–º!¬ª –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã.")
    await c.message.answer("–•–æ—Ä–æ—à–æ, –Ω–µ —Å–ø–µ—à–∏–º. –ö–æ–≥–¥–∞ –∫–æ–º–∞–Ω–¥–∞ —Å–æ–±–µ—Ä—ë—Ç—Å—è ‚Äî –∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–°—Ç–∞—Ä—Ç—É–µ–º!¬ª –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /startquest.")