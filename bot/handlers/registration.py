# bot/handlers/registration.py
import os
import logging
from urllib.parse import urlparse

from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardRemove  # üëà –¥–æ–±–∞–≤–∏–ª–∏ ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext

from ..states import RegStates
from ..keyboards import kb_request_phone, ib_webapp
from ..api_client import register_user, roster_by_tg
from ..utils import norm_phone, KNOWN, load_participants, format_roster, only_first_name
from ..config import STRICT_WHITELIST, TEAM_SIZE, API_BASE
from ..texts import ONBOARDING, CAPTAIN_ASSIGNED, ASK_TEAM_NAME

router = Router()


def _public_webapp_url() -> str | None:
    """
    –ë–µ—Ä—ë–º WEBAPP_PUBLIC_URL (–µ—Å–ª–∏ –∑–∞–¥–∞–Ω) –∏–Ω–∞—á–µ API_BASE/webapp.
    –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ https:// ‚Äî –∏–Ω–∞—á–µ None (–∏–Ω–∞—á–µ Telegram —É—Ä–æ–Ω–∏—Ç –∫–Ω–æ–ø–∫—É).
    """
    raw = os.getenv("WEBAPP_PUBLIC_URL") or f"{API_BASE}/webapp"
    try:
        p = urlparse(raw)
        if p.scheme == "https":
            return raw
    except Exception:
        pass
    return None


@router.message(F.text.in_({"/start", "start"}))
async def onboarding(m: Message):
    await m.answer(ONBOARDING, parse_mode="Markdown")


@router.message(F.text == "/reg")
async def reg_begin(m: Message, state: FSMContext):
    await state.set_state(RegStates.waiting_phone)
    await m.answer(
        "–®–∞–≥ 1/2: –ø—Ä–∏—à–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX",
        reply_markup=kb_request_phone()
    )


@router.message(RegStates.waiting_phone, F.contact)
async def reg_phone_contact(m: Message, state: FSMContext):
    me = m.contact
    if me and me.user_id and m.from_user and me.user_id != m.from_user.id:
        return await m.answer("–ù—É–∂–µ–Ω *—Ç–≤–æ–π* –Ω–æ–º–µ—Ä.", parse_mode="Markdown")
    phone = norm_phone(me.phone_number if me else "")
    if not phone:
        return await m.answer("–ù–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª –Ω–æ–º–µ—Ä. –ü—Ä–∏—à–ª–∏ –µ—â—ë —Ä–∞–∑.")
    await state.update_data(phone=phone)
    await state.set_state(RegStates.waiting_name)
    await m.answer("–®–∞–≥ 2/2: –ø—Ä–∏—à–ª–∏ *–∏–º—è* (–∫–∞–∫ —Ç–µ–±—è –∑–∞–ø–∏—Å–∞—Ç—å –≤ –∫–æ–º–∞–Ω–¥–µ).", parse_mode="Markdown")


@router.message(RegStates.waiting_phone, F.text)
async def reg_phone_text(m: Message, state: FSMContext):
    phone = norm_phone(m.text or "")
    if not phone:
        return await m.answer("–§–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω. –ü—Ä–∏–º–µ—Ä: +79991234567")
    await state.update_data(phone=phone)
    await state.set_state(RegStates.waiting_name)
    await m.answer("–®–∞–≥ 2/2: –ø—Ä–∏—à–ª–∏ *–∏–º—è* (–∫–∞–∫ —Ç–µ–±—è –∑–∞–ø–∏—Å–∞—Ç—å –≤ –∫–æ–º–∞–Ω–¥–µ).", parse_mode="Markdown")


@router.message(RegStates.waiting_name, F.text)
async def reg_name(m: Message, state: FSMContext):
    first = (m.text or "").strip().split()[0].title()
    if len(first) < 2:
        return await m.answer("–ò–º—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ú–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞.")

    data = await state.get_data()
    phone = data.get("phone", "")

    if STRICT_WHITELIST:
        load_participants()
        if phone not in KNOWN:
            await state.clear()
            return await m.answer("–ù–µ –Ω–∞—à—ë–ª —Ç–µ–±—è –≤ —Å–ø–∏—Å–∫–µ. –û–±—Ä–∞—Ç–∏—Å—å –∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—É.")

    st, payload = await register_user(m.from_user.id, phone, first)
    await state.clear()
    if st != 200:
        logging.error("register_user failed: %s %s", st, payload)
        return await m.answer("–°–µ—Ä–≤–∏—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")

    # üëá –°–ø—Ä—è—á–µ–º –ö–õ–ê–í–ò–ê–¢–£–†–£ ¬´–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω¬ª –°–†–ê–ó–£ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    try:
        await m.answer("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", reply_markup=ReplyKeyboardRemove())
    except Exception:
        pass

    # –°–æ—Å—Ç–∞–≤ + (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –∫–Ω–æ–ø–∫–∞ WebApp
    st_r, roster = await roster_by_tg(m.from_user.id)
    if st_r == 200 and roster:
        roster_text = format_roster(roster)
        webapp_url = _public_webapp_url()
        kb = ib_webapp(webapp_url)

        if kb:
            await m.answer(roster_text, parse_mode="Markdown", reply_markup=kb)
        else:
            await m.answer(roster_text, parse_mode="Markdown")

        # ¬´–ö–∞–ø–∏—Ç–∞–Ω–æ–º –Ω–∞–∑–Ω–∞—á–µ–Ω ‚Ä¶¬ª
        cap = roster.get("captain")
        if cap:
            await m.answer(CAPTAIN_ASSIGNED.format(captain=only_first_name(cap)), parse_mode="Markdown")

        # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –ø–æ–ª–Ω–∞—è ‚Äî –ø—Ä–æ—Å–∏–º –∫–∞–ø–∏—Ç–∞–Ω–∞ –Ω–∞–∑–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É
        members_count = len(roster.get("members") or [])
        if cap and members_count >= TEAM_SIZE:
            try:
                if str(cap.get("tg_id")) == str(m.from_user.id):
                    await m.answer("–ö–æ–º–∞–Ω–¥–∞ –≤—ã–≥–ª—è–¥–∏—Ç –ø–æ–ª–Ω–æ–π. " + ASK_TEAM_NAME)
                else:
                    await m.bot.send_message(cap["tg_id"], ASK_TEAM_NAME)
            except Exception:
                logging.debug("Failed to DM captain about team name")
    else:
        await m.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞. /team ‚Äî —Å–æ—Å—Ç–∞–≤ –∫–æ–º–∞–Ω–¥—ã.")